

Apr 22 21:16 2011  Page 1


GIT(1)                            Git Manual                            GIT(1)



NNAAMMEE
       git - the stupid content tracker

SSYYNNOOPPSSIISS
       _g_i_t [--version] [--exec-path[=<path>]] [--html-path]
           [-p|--paginate|--no-pager] [--no-replace-objects]
           [--bare] [--git-dir=<path>] [--work-tree=<path>]
           [-c <name>=<value>]
           [--help] <command> [<args>]


DDEESSCCRRIIPPTTIIOONN
       Git is a fast, scalable, distributed revision control system with an
       unusually rich command set that provides both high-level operations and
       full access to internals.

       See ggiittttuuttoorriiaall(7) to get started, then see EEvveerryyddaayy GGiitt[1] for a
       useful minimum set of commands, and "man git-commandname" for
       documentation of each command. CVS users may also want to read ggiittccvvss--
       mmiiggrraattiioonn(7). See the GGiitt UUsseerr''ss MMaannuuaall[2] for a more in-depth
       introduction.

       The _<_c_o_m_m_a_n_d_> is either a name of a Git command (see below) or an alias
       as defined in the configuration file (see ggiitt--ccoonnffiigg(1)).

       Formatted and hyperlinked version of the latest git documentation can
       be viewed at http://www.kernel.org/pub/software/scm/git/docs/.

OOPPTTIIOONNSS
       --version
           Prints the git suite version that the _g_i_t program came from.

       --help
           Prints the synopsis and a list of the most commonly used commands.
           If the option _-_-_a_l_l or _-_a is given then all available commands are
           printed. If a git command is named this option will bring up the
           manual page for that command.

           Other options are available to control how the manual page is
           displayed. See ggiitt--hheellpp(1) for more information, because git --help
           ...  is converted internally into git help ....

       -c <name>=<value>
           Pass a configuration parameter to the command. The value given will
           override values from configuration files. The <name> is expected in
           the same format as listed by _g_i_t _c_o_n_f_i_g (subkeys separated by
           dots).

       --exec-path[=<path>]
           Path to wherever your core git programs are installed. This can
           also be controlled by setting the GIT_EXEC_PATH environment
           variable. If no path is given, _g_i_t will print the current setting







Apr 22 21:16 2011  Page 2


           and then exit.

       --html-path
           Print the path to wherever your git HTML documentation is installed
           and exit.

       -p, --paginate
           Pipe all output into _l_e_s_s (or if set, $PAGER) if standard output is
           a terminal. This overrides the pager.<cmd> configuration options
           (see the "Configuration Mechanism" section below).

       --no-pager
           Do not pipe git output into a pager.

       --git-dir=<path>
           Set the path to the repository. This can also be controlled by
           setting the GIT_DIR environment variable. It can be an absolute
           path or relative path to current working directory.

       --work-tree=<path>
           Set the path to the working tree. It can be an absolute path or a
           path relative to the current working directory. This can also be
           controlled by setting the GIT_WORK_TREE environment variable and
           the core.worktree configuration variable (see core.worktree in ggiitt--
           ccoonnffiigg(1) for a more detailed discussion).

       --bare
           Treat the repository as a bare repository. If GIT_DIR environment
           is not set, it is set to the current working directory.

       --no-replace-objects
           Do not use replacement refs to replace git objects. See ggiitt--
           rreeppllaaccee(1) for more information.

FFUURRTTHHEERR DDOOCCUUMMEENNTTAATTIIOONN
       See the references above to get started using git. The following is
       probably more detail than necessary for a first-time user.

       The ggiitt ccoonncceeppttss cchhaapptteerr ooff tthhee uusseerr--mmaannuuaall[3] and ggiittccoorree--ttuuttoorriiaall(7)
       both provide introductions to the underlying git architecture.

       See ggiittwwoorrkkfflloowwss(7) for an overview of recommended workflows.

       See also the hhoowwttoo[4] documents for some useful examples.

       The internals are documented in the GGIITT AAPPII ddooccuummeennttaattiioonn[5].

GGIITT CCOOMMMMAANNDDSS
       We divide git into high level ("porcelain") commands and low level
       ("plumbing") commands.

HHIIGGHH--LLEEVVEELL CCOOMMMMAANNDDSS ((PPOORRCCEELLAAIINN))
       We separate the porcelain commands into the main commands and some
       ancillary user utilities.

   MMaaiinn ppoorrcceellaaiinn ccoommmmaannddss







Apr 22 21:16 2011  Page 3


       ggiitt--aadddd(1)
           Add file contents to the index.

       ggiitt--aamm(1)
           Apply a series of patches from a mailbox.

       ggiitt--aarrcchhiivvee(1)
           Create an archive of files from a named tree.

       ggiitt--bbiisseecctt(1)
           Find by binary search the change that introduced a bug.

       ggiitt--bbrraanncchh(1)
           List, create, or delete branches.

       ggiitt--bbuunnddllee(1)
           Move objects and refs by archive.

       ggiitt--cchheecckkoouutt(1)
           Checkout a branch or paths to the working tree.

       ggiitt--cchheerrrryy--ppiicckk(1)
           Apply the changes introduced by some existing commits.

       ggiitt--cciittooooll(1)
           Graphical alternative to git-commit.

       ggiitt--cclleeaann(1)
           Remove untracked files from the working tree.

       ggiitt--cclloonnee(1)
           Clone a repository into a new directory.

       ggiitt--ccoommmmiitt(1)
           Record changes to the repository.

       ggiitt--ddeessccrriibbee(1)
           Show the most recent tag that is reachable from a commit.

       ggiitt--ddiiffff(1)
           Show changes between commits, commit and working tree, etc.

       ggiitt--ffeettcchh(1)
           Download objects and refs from another repository.

       ggiitt--ffoorrmmaatt--ppaattcchh(1)
           Prepare patches for e-mail submission.

       ggiitt--ggcc(1)
           Cleanup unnecessary files and optimize the local repository.

       ggiitt--ggrreepp(1)
           Print lines matching a pattern.

       ggiitt--gguuii(1)
           A portable graphical interface to Git.







Apr 22 21:16 2011  Page 4



       ggiitt--iinniitt(1)
           Create an empty git repository or reinitialize an existing one.

       ggiitt--lloogg(1)
           Show commit logs.

       ggiitt--mmeerrggee(1)
           Join two or more development histories together.

       ggiitt--mmvv(1)
           Move or rename a file, a directory, or a symlink.

       ggiitt--nnootteess(1)
           Add or inspect object notes.

       ggiitt--ppuullll(1)
           Fetch from and merge with another repository or a local branch.

       ggiitt--ppuusshh(1)
           Update remote refs along with associated objects.

       ggiitt--rreebbaassee(1)
           Forward-port local commits to the updated upstream head.

       ggiitt--rreesseett(1)
           Reset current HEAD to the specified state.

       ggiitt--rreevveerrtt(1)
           Revert some existing commits.

       ggiitt--rrmm(1)
           Remove files from the working tree and from the index.

       ggiitt--sshhoorrttlloogg(1)
           Summarize _g_i_t _l_o_g output.

       ggiitt--sshhooww(1)
           Show various types of objects.

       ggiitt--ssttaasshh(1)
           Stash the changes in a dirty working directory away.

       ggiitt--ssttaattuuss(1)
           Show the working tree status.

       ggiitt--ssuubbmmoodduullee(1)
           Initialize, update or inspect submodules.

       ggiitt--ttaagg(1)
           Create, list, delete or verify a tag object signed with GPG.

       ggiittkk(1)
           The git repository browser.

   AAnncciillllaarryy CCoommmmaannddss







Apr 22 21:16 2011  Page 5


       Manipulators:

       ggiitt--ccoonnffiigg(1)
           Get and set repository or global options.

       ggiitt--ffaasstt--eexxppoorrtt(1)
           Git data exporter.

       ggiitt--ffaasstt--iimmppoorrtt(1)
           Backend for fast Git data importers.

       ggiitt--ffiilltteerr--bbrraanncchh(1)
           Rewrite branches.

       ggiitt--lloosstt--ffoouunndd(1)
           (deprecated) Recover lost refs that luckily have not yet been
           pruned.

       ggiitt--mmeerrggeettooooll(1)
           Run merge conflict resolution tools to resolve merge conflicts.

       ggiitt--ppaacckk--rreeffss(1)
           Pack heads and tags for efficient repository access.

       ggiitt--pprruunnee(1)
           Prune all unreachable objects from the object database.

       ggiitt--rreefflloogg(1)
           Manage reflog information.

       ggiitt--rreelliinnkk(1)
           Hardlink common objects in local repositories.

       ggiitt--rreemmoottee(1)
           manage set of tracked repositories.

       ggiitt--rreeppaacckk(1)
           Pack unpacked objects in a repository.

       ggiitt--rreeppllaaccee(1)
           Create, list, delete refs to replace objects.

       ggiitt--rreeppoo--ccoonnffiigg(1)
           (deprecated) Get and set repository or global options.

       Interrogators:

       ggiitt--aannnnoottaattee(1)
           Annotate file lines with commit information.

       ggiitt--bbllaammee(1)
           Show what revision and author last modified each line of a file.

       ggiitt--cchheerrrryy(1)
           Find commits not merged upstream.








Apr 22 21:16 2011  Page 6


       ggiitt--ccoouunntt--oobbjjeeccttss(1)
           Count unpacked number of objects and their disk consumption.

       ggiitt--ddiiffffttooooll(1)
           Show changes using common diff tools.

       ggiitt--ffsscckk(1)
           Verifies the connectivity and validity of the objects in the
           database.

       ggiitt--ggeett--ttaarr--ccoommmmiitt--iidd(1)
           Extract commit ID from an archive created using git-archive.

       ggiitt--hheellpp(1)
           display help information about git.

       ggiitt--iinnssttaawweebb(1)
           Instantly browse your working repository in gitweb.

       ggiitt--mmeerrggee--ttrreeee(1)
           Show three-way merge without touching index.

       ggiitt--rreerreerree(1)
           Reuse recorded resolution of conflicted merges.

       ggiitt--rreevv--ppaarrssee(1)
           Pick out and massage parameters.

       ggiitt--sshhooww--bbrraanncchh(1)
           Show branches and their commits.

       ggiitt--vveerriiffyy--ttaagg(1)
           Check the GPG signature of tags.

       ggiitt--wwhhaattcchhaannggeedd(1)
           Show logs with difference each commit introduces.

   IInntteerraaccttiinngg wwiitthh OOtthheerrss
       These commands are to interact with foreign SCM and with other people
       via patch over e-mail.

       ggiitt--aarrcchhiimmppoorrtt(1)
           Import an Arch repository into git.

       ggiitt--ccvvsseexxppoorrttccoommmmiitt(1)
           Export a single commit to a CVS checkout.

       ggiitt--ccvvssiimmppoorrtt(1)
           Salvage your data out of another SCM people love to hate.

       ggiitt--ccvvsssseerrvveerr(1)
           A CVS server emulator for git.

       ggiitt--iimmaapp--sseenndd(1)
           Send a collection of patches from stdin to an IMAP folder.








Apr 22 21:16 2011  Page 7


       ggiitt--qquuiillttiimmppoorrtt(1)
           Applies a quilt patchset onto the current branch.

       ggiitt--rreeqquueesstt--ppuullll(1)
           Generates a summary of pending changes.

       ggiitt--sseenndd--eemmaaiill(1)
           Send a collection of patches as emails.

       ggiitt--ssvvnn(1)
           Bidirectional operation between a Subversion repository and git.

LLOOWW--LLEEVVEELL CCOOMMMMAANNDDSS ((PPLLUUMMBBIINNGG))
       Although git includes its own porcelain layer, its low-level commands
       are sufficient to support development of alternative porcelains.
       Developers of such porcelains might start by reading about ggiitt--uuppddaattee--
       iinnddeexx(1) and ggiitt--rreeaadd--ttrreeee(1).

       The interface (input, output, set of options and the semantics) to
       these low-level commands are meant to be a lot more stable than
       Porcelain level commands, because these commands are primarily for
       scripted use. The interface to Porcelain commands on the other hand are
       subject to change in order to improve the end user experience.

       The following description divides the low-level commands into commands
       that manipulate objects (in the repository, index, and working tree),
       commands that interrogate and compare objects, and commands that move
       objects and references between repositories.

   MMaanniippuullaattiioonn ccoommmmaannddss
       ggiitt--aappppllyy(1)
           Apply a patch to files and/or to the index.

       ggiitt--cchheecckkoouutt--iinnddeexx(1)
           Copy files from the index to the working tree.

       ggiitt--ccoommmmiitt--ttrreeee(1)
           Create a new commit object.

       ggiitt--hhaasshh--oobbjjeecctt(1)
           Compute object ID and optionally creates a blob from a file.

       ggiitt--iinnddeexx--ppaacckk(1)
           Build pack index file for an existing packed archive.

       ggiitt--mmeerrggee--ffiillee(1)
           Run a three-way file merge.

       ggiitt--mmeerrggee--iinnddeexx(1)
           Run a merge for files needing merging.

       ggiitt--mmkkttaagg(1)
           Creates a tag object.

       ggiitt--mmkkttrreeee(1)
           Build a tree-object from ls-tree formatted text.







Apr 22 21:16 2011  Page 8



       ggiitt--ppaacckk--oobbjjeeccttss(1)
           Create a packed archive of objects.

       ggiitt--pprruunnee--ppaacckkeedd(1)
           Remove extra objects that are already in pack files.

       ggiitt--rreeaadd--ttrreeee(1)
           Reads tree information into the index.

       ggiitt--ssyymmbboolliicc--rreeff(1)
           Read and modify symbolic refs.

       ggiitt--uunnppaacckk--oobbjjeeccttss(1)
           Unpack objects from a packed archive.

       ggiitt--uuppddaattee--iinnddeexx(1)
           Register file contents in the working tree to the index.

       ggiitt--uuppddaattee--rreeff(1)
           Update the object name stored in a ref safely.

       ggiitt--wwrriittee--ttrreeee(1)
           Create a tree object from the current index.

   IInntteerrrrooggaattiioonn ccoommmmaannddss
       ggiitt--ccaatt--ffiillee(1)
           Provide content or type and size information for repository
           objects.

       ggiitt--ddiiffff--ffiilleess(1)
           Compares files in the working tree and the index.

       ggiitt--ddiiffff--iinnddeexx(1)
           Compares content and mode of blobs between the index and
           repository.

       ggiitt--ddiiffff--ttrreeee(1)
           Compares the content and mode of blobs found via two tree objects.

       ggiitt--ffoorr--eeaacchh--rreeff(1)
           Output information on each ref.

       ggiitt--llss--ffiilleess(1)
           Show information about files in the index and the working tree.

       ggiitt--llss--rreemmoottee(1)
           List references in a remote repository.

       ggiitt--llss--ttrreeee(1)
           List the contents of a tree object.

       ggiitt--mmeerrggee--bbaassee(1)
           Find as good common ancestors as possible for a merge.

       ggiitt--nnaammee--rreevv(1)







Apr 22 21:16 2011  Page 9


           Find symbolic names for given revs.

       ggiitt--ppaacckk--rreedduunnddaanntt(1)
           Find redundant pack files.

       ggiitt--rreevv--lliisstt(1)
           Lists commit objects in reverse chronological order.

       ggiitt--sshhooww--iinnddeexx(1)
           Show packed archive index.

       ggiitt--sshhooww--rreeff(1)
           List references in a local repository.

       ggiitt--ttaarr--ttrreeee(1)
           (deprecated) Create a tar archive of the files in the named tree
           object.

       ggiitt--uunnppaacckk--ffiillee(1)
           Creates a temporary file with a blob's contents.

       ggiitt--vvaarr(1)
           Show a git logical variable.

       ggiitt--vveerriiffyy--ppaacckk(1)
           Validate packed git archive files.

       In general, the interrogate commands do not touch the files in the
       working tree.

   SSyynncchhiinngg rreeppoossiittoorriieess
       ggiitt--ddaaeemmoonn(1)
           A really simple server for git repositories.

       ggiitt--ffeettcchh--ppaacckk(1)
           Receive missing objects from another repository.

       ggiitt--hhttttpp--bbaacckkeenndd(1)
           Server side implementation of Git over HTTP.

       ggiitt--sseenndd--ppaacckk(1)
           Push objects over git protocol to another repository.

       ggiitt--uuppddaattee--sseerrvveerr--iinnffoo(1)
           Update auxiliary info file to help dumb servers.

       The following are helper commands used by the above; end users
       typically do not use them directly.

       ggiitt--hhttttpp--ffeettcchh(1)
           Download from a remote git repository via HTTP.

       ggiitt--hhttttpp--ppuusshh(1)
           Push objects over HTTP/DAV to another repository.

       ggiitt--ppaarrssee--rreemmoottee(1)







Apr 22 21:16 2011  Page 10


           Routines to help parsing remote repository access parameters.

       ggiitt--rreecceeiivvee--ppaacckk(1)
           Receive what is pushed into the repository.

       ggiitt--sshheellll(1)
           Restricted login shell for Git-only SSH access.

       ggiitt--uuppllooaadd--aarrcchhiivvee(1)
           Send archive back to git-archive.

       ggiitt--uuppllooaadd--ppaacckk(1)
           Send objects packed back to git-fetch-pack.

   IInntteerrnnaall hheellppeerr ccoommmmaannddss
       These are internal helper commands used by other commands; end users
       typically do not use them directly.

       ggiitt--cchheecckk--aattttrr(1)
           Display gitattributes information.

       ggiitt--cchheecckk--rreeff--ffoorrmmaatt(1)
           Ensures that a reference name is well formed.

       ggiitt--ffmmtt--mmeerrggee--mmssgg(1)
           Produce a merge commit message.

       ggiitt--mmaaiilliinnffoo(1)
           Extracts patch and authorship from a single e-mail message.

       ggiitt--mmaaiillsspplliitt(1)
           Simple UNIX mbox splitter program.

       ggiitt--mmeerrggee--oonnee--ffiillee(1)
           The standard helper program to use with git-merge-index.

       ggiitt--ppaattcchh--iidd(1)
           Compute unique ID for a patch.

       ggiitt--ppeeeekk--rreemmoottee(1)
           (deprecated) List the references in a remote repository.

       ggiitt--sshh--sseettuupp(1)
           Common git shell script setup code.

       ggiitt--ssttrriippssppaaccee(1)
           Filter out empty lines.

CCOONNFFIIGGUURRAATTIIOONN MMEECCHHAANNIISSMM
       Starting from 0.99.9 (actually mid 0.99.8.GIT), .git/config file is
       used to hold per-repository configuration options. It is a simple text
       file modeled after .ini format familiar to some people. Here is an
       example:

           #
           # A '#' or ';' character indicates a comment.







Apr 22 21:16 2011  Page 11


           #

           ; core variables
           [core]
                   ; Don't trust file modes
                   filemode = false

           ; user identity
           [user]
                   name = "Junio C Hamano"
                   email = "junkio@twinsun.com"


       Various commands read from the configuration file and adjust their
       operation accordingly. See ggiitt--ccoonnffiigg(1) for a list.

IIDDEENNTTIIFFIIEERR TTEERRMMIINNOOLLOOGGYY
       <object>
           Indicates the object name for any type of object.

       <blob>
           Indicates a blob object name.

       <tree>
           Indicates a tree object name.

       <commit>
           Indicates a commit object name.

       <tree-ish>
           Indicates a tree, commit or tag object name. A command that takes a
           <tree-ish> argument ultimately wants to operate on a <tree> object
           but automatically dereferences <commit> and <tag> objects that
           point at a <tree>.

       <commit-ish>
           Indicates a commit or tag object name. A command that takes a
           <commit-ish> argument ultimately wants to operate on a <commit>
           object but automatically dereferences <tag> objects that point at a
           <commit>.

       <type>
           Indicates that an object type is required. Currently one of: blob,
           tree, commit, or tag.

       <file>
           Indicates a filename - almost always relative to the root of the
           tree structure GIT_INDEX_FILE describes.

SSYYMMBBOOLLIICC IIDDEENNTTIIFFIIEERRSS
       Any git command accepting any <object> can also use the following
       symbolic notation:

       HEAD
           indicates the head of the current branch (i.e. the contents of
           $GIT_DIR/HEAD).







Apr 22 21:16 2011  Page 12



       <tag>
           a valid tag _n_a_m_e (i.e. the contents of $GIT_DIR/refs/tags/<tag>).

       <head>
           a valid head _n_a_m_e (i.e. the contents of
           $GIT_DIR/refs/heads/<head>).

       For a more complete list of ways to spell object names, see "SPECIFYING
       REVISIONS" section in ggiittrreevviissiioonnss(7).

FFIILLEE//DDIIRREECCTTOORRYY SSTTRRUUCCTTUURREE
       Please see the ggiittrreeppoossiittoorryy--llaayyoouutt(5) document.

       Read ggiitthhooookkss(5) for more details about each hook.

       Higher level SCMs may provide and manage additional information in the
       $GIT_DIR.

TTEERRMMIINNOOLLOOGGYY
       Please see ggiittgglloossssaarryy(7).

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       Various git commands use the following environment variables:

   TThhee ggiitt RReeppoossiittoorryy
       These environment variables apply to _a_l_l core git commands. Nb: it is
       worth noting that they may be used/overridden by SCMS sitting above git
       so take care if using Cogito etc.

       _G_I_T___I_N_D_E_X___F_I_L_E
           This environment allows the specification of an alternate index
           file. If not specified, the default of $GIT_DIR/index is used.

       _G_I_T___O_B_J_E_C_T___D_I_R_E_C_T_O_R_Y
           If the object storage directory is specified via this environment
           variable then the sha1 directories are created underneath -
           otherwise the default $GIT_DIR/objects directory is used.

       _G_I_T___A_L_T_E_R_N_A_T_E___O_B_J_E_C_T___D_I_R_E_C_T_O_R_I_E_S
           Due to the immutable nature of git objects, old objects can be
           archived into shared, read-only directories. This variable
           specifies a ":" separated (on Windows ";" separated) list of git
           object directories which can be used to search for git objects. New
           objects will not be written to these directories.

       _G_I_T___D_I_R
           If the _G_I_T___D_I_R environment variable is set then it specifies a path
           to use instead of the default .git for the base of the repository.

       _G_I_T___W_O_R_K___T_R_E_E
           Set the path to the working tree. The value will not be used in
           combination with repositories found automatically in a .git
           directory (i.e. $GIT_DIR is not set). This can also be controlled
           by the _-_-_w_o_r_k_-_t_r_e_e command line option and the core.worktree
           configuration variable.







Apr 22 21:16 2011  Page 13



       _G_I_T___C_E_I_L_I_N_G___D_I_R_E_C_T_O_R_I_E_S
           This should be a colon-separated list of absolute paths. If set, it
           is a list of directories that git should not chdir up into while
           looking for a repository directory. It will not exclude the current
           working directory or a GIT_DIR set on the command line or in the
           environment. (Useful for excluding slow-loading network
           directories.)

       _G_I_T___D_I_S_C_O_V_E_R_Y___A_C_R_O_S_S___F_I_L_E_S_Y_S_T_E_M
           When run in a directory that does not have ".git" repository
           directory, git tries to find such a directory in the parent
           directories to find the top of the working tree, but by default it
           does not cross filesystem boundaries. This environment variable can
           be set to true to tell git not to stop at filesystem boundaries.
           Like _G_I_T___C_E_I_L_I_N_G___D_I_R_E_C_T_O_R_I_E_S, this will not affect an explicit
           repository directory set via _G_I_T___D_I_R or on the command line.

   ggiitt CCoommmmiittss
       _G_I_T___A_U_T_H_O_R___N_A_M_E, _G_I_T___A_U_T_H_O_R___E_M_A_I_L, _G_I_T___A_U_T_H_O_R___D_A_T_E, _G_I_T___C_O_M_M_I_T_T_E_R___N_A_M_E,
       _G_I_T___C_O_M_M_I_T_T_E_R___E_M_A_I_L, _G_I_T___C_O_M_M_I_T_T_E_R___D_A_T_E, _E_M_A_I_L
           see ggiitt--ccoommmmiitt--ttrreeee(1)

   ggiitt DDiiffffss
       _G_I_T___D_I_F_F___O_P_T_S
           Only valid setting is "--unified=??" or "-u??" to set the number of
           context lines shown when a unified diff is created. This takes
           precedence over any "-U" or "--unified" option value passed on the
           git diff command line.

       _G_I_T___E_X_T_E_R_N_A_L___D_I_F_F
           When the environment variable _G_I_T___E_X_T_E_R_N_A_L___D_I_F_F is set, the program
           named by it is called, instead of the diff invocation described
           above. For a path that is added, removed, or modified,
           _G_I_T___E_X_T_E_R_N_A_L___D_I_F_F is called with 7 parameters:

               path old-file old-hex old-mode new-file new-hex new-mode

           where:

       <old|new>-file
           are files GIT_EXTERNAL_DIFF can use to read the contents of
           <old|new>,

       <old|new>-hex
           are the 40-hexdigit SHA1 hashes,

       <old|new>-mode
           are the octal representation of the file modes.

       + The file parameters can point at the user's working file (e.g.
       new-file in "git-diff-files"), /dev/null (e.g. old-file when a new file
       is added), or a temporary file (e.g. old-file in the index).
       _G_I_T___E_X_T_E_R_N_A_L___D_I_F_F should not worry about unlinking the temporary file
       --- it is removed when _G_I_T___E_X_T_E_R_N_A_L___D_I_F_F exits.








Apr 22 21:16 2011  Page 14


       + For a path that is unmerged, _G_I_T___E_X_T_E_R_N_A_L___D_I_F_F is called with 1
       parameter, <path>.

   ootthheerr
       _G_I_T___M_E_R_G_E___V_E_R_B_O_S_I_T_Y
           A number controlling the amount of output shown by the recursive
           merge strategy. Overrides merge.verbosity. See ggiitt--mmeerrggee(1)

       _G_I_T___P_A_G_E_R
           This environment variable overrides $PAGER. If it is set to an
           empty string or to the value "cat", git will not launch a pager.
           See also the core.pager option in ggiitt--ccoonnffiigg(1).

       _G_I_T___S_S_H
           If this environment variable is set then _g_i_t _f_e_t_c_h and _g_i_t _p_u_s_h
           will use this command instead of _s_s_h when they need to connect to a
           remote system. The _$_G_I_T___S_S_H command will be given exactly two
           arguments: the _u_s_e_r_n_a_m_e_@_h_o_s_t (or just _h_o_s_t) from the URL and the
           shell command to execute on that remote system.

           To pass options to the program that you want to list in GIT_SSH you
           will need to wrap the program and options into a shell script, then
           set GIT_SSH to refer to the shell script.

           Usually it is easier to configure any desired options through your
           personal .ssh/config file. Please consult your ssh documentation
           for further details.

       _G_I_T___A_S_K_P_A_S_S
           If this environment variable is set, then git commands which need
           to acquire passwords or passphrases (e.g. for HTTP or IMAP
           authentication) will call this program with a suitable prompt as
           command line argument and read the password from its STDOUT. See
           also the _c_o_r_e_._a_s_k_p_a_s_s option in ggiitt--ccoonnffiigg(1).

       _G_I_T___F_L_U_S_H
           If this environment variable is set to "1", then commands such as
           _g_i_t _b_l_a_m_e (in incremental mode), _g_i_t _r_e_v_-_l_i_s_t, _g_i_t _l_o_g, and _g_i_t
           _w_h_a_t_c_h_a_n_g_e_d will force a flush of the output stream after each
           commit-oriented record have been flushed. If this variable is set
           to "0", the output of these commands will be done using completely
           buffered I/O. If this environment variable is not set, git will
           choose buffered or record-oriented flushing based on whether stdout
           appears to be redirected to a file or not.

       _G_I_T___T_R_A_C_E
           If this variable is set to "1", "2" or "true" (comparison is case
           insensitive), git will print trace: messages on stderr telling
           about alias expansion, built-in command execution and external
           command execution. If this variable is set to an integer value
           greater than 1 and lower than 10 (strictly) then git will interpret
           this value as an open file descriptor and will try to write the
           trace messages into this file descriptor. Alternatively, if this
           variable is set to an absolute path (starting with a _/ character),
           git will interpret this as a file path and will try to write the
           trace messages into it.







Apr 22 21:16 2011  Page 15



DDIISSCCUUSSSSIIOONN
       More detail on the following is available from the ggiitt ccoonncceeppttss cchhaapptteerr
       ooff tthhee uusseerr--mmaannuuaall[3] and ggiittccoorree--ttuuttoorriiaall(7).

       A git project normally consists of a working directory with a ".git"
       subdirectory at the top level. The .git directory contains, among other
       things, a compressed object database representing the complete history
       of the project, an "index" file which links that history to the current
       contents of the working tree, and named pointers into that history such
       as tags and branch heads.

       The object database contains objects of three main types: blobs, which
       hold file data; trees, which point to blobs and other trees to build up
       directory hierarchies; and commits, which each reference a single tree
       and some number of parent commits.

       The commit, equivalent to what other systems call a "changeset" or
       "version", represents a step in the project's history, and each parent
       represents an immediately preceding step. Commits with more than one
       parent represent merges of independent lines of development.

       All objects are named by the SHA1 hash of their contents, normally
       written as a string of 40 hex digits. Such names are globally unique.
       The entire history leading up to a commit can be vouched for by signing
       just that commit. A fourth object type, the tag, is provided for this
       purpose.

       When first created, objects are stored in individual files, but for
       efficiency may later be compressed together into "pack files".

       Named pointers called refs mark interesting points in history. A ref
       may contain the SHA1 name of an object or the name of another ref. Refs
       with names beginning ref/head/ contain the SHA1 name of the most recent
       commit (or "head") of a branch under development. SHA1 names of tags of
       interest are stored under ref/tags/. A special ref named HEAD contains
       the name of the currently checked-out branch.

       The index file is initialized with a list of all paths and, for each
       path, a blob object and a set of attributes. The blob object represents
       the contents of the file as of the head of the current branch. The
       attributes (last modified time, size, etc.) are taken from the
       corresponding file in the working tree. Subsequent changes to the
       working tree can be found by comparing these attributes. The index may
       be updated with new content, and new commits may be created from the
       content stored in the index.

       The index is also capable of storing multiple entries (called "stages")
       for a given pathname. These stages are used to hold the various
       unmerged version of a file when a merge is in progress.

AAUUTTHHOORRSS
       +o   git's founding father is Linus Torvalds <ttoorrvvaallddss@@oossddll..oorrgg[6]>.

       +o   The current git nurse is Junio C Hamano <ggiittsstteerr@@ppoobbooxx..ccoomm[7]>.








Apr 22 21:16 2011  Page 16


       +o   The git potty was written by Andreas Ericsson <aaee@@oopp55..ssee[8]>.

       +o   General upbringing is handled by the git-list
           <ggiitt@@vvggeerr..kkeerrnneell..oorrgg[9]>.

DDOOCCUUMMEENNTTAATTIIOONN
       The documentation for git suite was started by David Greaves
       <ddaavviidd@@ddggrreeaavveess..ccoomm[10]>, and later enhanced greatly by the
       contributors on the git-list <ggiitt@@vvggeerr..kkeerrnneell..oorrgg[9]>.

RREEPPOORRTTIINNGG BBUUGGSS
       Report bugs to the Git mailing list <ggiitt@@vvggeerr..kkeerrnneell..oorrgg[9]> where the
       development and maintenance is primarily done. You do not have to be
       subscribed to the list to send a message there.

SSEEEE AALLSSOO
       ggiittttuuttoorriiaall(7), ggiittttuuttoorriiaall--22(7), EEvveerryyddaayy GGiitt[1], ggiittccvvss--mmiiggrraattiioonn(7),
       ggiittgglloossssaarryy(7), ggiittccoorree--ttuuttoorriiaall(7), ggiittccllii(7), TThhee GGiitt UUsseerr''ss
       MMaannuuaall[2], ggiittwwoorrkkfflloowwss(7)

GGIITT
       Part of the ggiitt(1) suite

NNOOTTEESS
        1. Everyday Git
           http://www.kernel.org/pub/software/scm/git/docs/everyday.html

        2. Git User's Manual
           http://www.kernel.org/pub/software/scm/git/docs/user-manual.html

        3. git concepts chapter of the user-manual
           http://www.kernel.org/pub/software/scm/git/docs/user-manual.html#git-concepts

        4. howto
           http://www.kernel.org/pub/software/scm/git/docs/howto-index.html

        5. GIT API documentation
           http://www.kernel.org/pub/software/scm/git/docs/technical/api-index.html

        6. torvalds@osdl.org
           mailto:torvalds@osdl.org

        7. gitster@pobox.com
           mailto:gitster@pobox.com

        8. ae@op5.se
           mailto:ae@op5.se

        9. git@vger.kernel.org
           mailto:git@vger.kernel.org

       10. david@dgreaves.com
           mailto:david@dgreaves.com










Apr 22 21:16 2011  Page 17


Git 1.7.4                         01/31/2011                            GIT(1)




























































