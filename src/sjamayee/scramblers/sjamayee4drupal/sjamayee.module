<?php
// $Id$

// TODO / complete refactoring based on new reduced data model.
// - modify create_functions based on new data model.
// - complete with nodes,taxonomy,menus,... other dynamic drupal datasets.
// - split scrambling (server/client) - server (only retrieve data) / client (link references, store indexeddb).
// - test

/**
 * @file
 * This is the drupal scrambler module.
 * Should scramble the dynamic content of drupal.
 *
 * The project_planning is only for demo, first tests. This is not generic!
 */

//1/PROJ : FcFrR4yrCvtxntkrbSrmqZ8W9x_KAec2-sIOuDmUu88
//         15c16b478cab0afb719ed92b6d2ae6a99f16f71fca01e736fac20eb83994bbcf

function sjamayee_services_resources() {
//require_once("resources/sjamayee_sequence_resource.inc");
  require_once("resources/sjamayee_type_resource.inc");
  require_once("resources/sjamayee_text_resource.inc");
  require_once("resources/sjamayee_object_resource.inc");
  require_once("resources/sjamayee_attribute_resource.inc");
  require_once("resources/sjamayee_reference_resource.inc");
  require_once("resources/sjamayee_parent_reference_resource.inc");
  require_once("resources/sjamayee_child_reference_resource.inc");

  $resources = array();
//$resources += _sjamayee_sequence_resource_definition();
  $resources += _sjamayee_type_resource_definition();
  $resources += _sjamayee_text_resource_definition();
  $resources += _sjamayee_object_resource_definition();
  $resources += _sjamayee_attribute_resource_definition();
  $resources += _sjamayee_reference_resource_definition();
  $resources += _sjamayee_parent_reference_resource_definition();
  $resources += _sjamayee_child_reference_resource_definition();
  return $resources;
}

function sjamayee_scramble() {
  //Sjamayee dataset names.
  $S = 'sja_sequences';
  $T = 'sja_types';
  $X = 'sja_texts';
  $O = 'sja_objects';
  $A = 'sja_attributes';
  $R = 'sja_references';
  //Clear datasets.
  db_delete($S)->execute();
  db_delete($T)->execute();
  db_delete($X)->execute();
  db_delete($O)->execute();
  //db_delete($A)->execute();
  db_delete($R)->execute();

  //Scramble.
  //_sjamayee_scramble_drupal($S, $T, $X, $O, $A, $R);
  _sjamayee_scramble_project_planning($S, $T, $X, $O, $A, $R);
  //Link References.
  //Link all model child references for one parent by previous and next id's.
  $model_objects = db_query('select * from {' . $O . '} where mei = NULL');
  foreach ($model_objects as $model_object) {
    //$model_references = db_select($R, 'r')->condition('r.pei', $model_object->id, '=')->execute();
    $model_references = db_query('select * from {' . $R . '} where pei = :pei', array(':pei' => $model_object->id));
    //_sjamayee_link_references($R, $model_references);
    _sjamayee_link_references($model_references);
  }
  //Link all data child references for one parent by previous and next id's.
  $data_objects = db_query('select * from {' . $O . '} where mei != NULL');
  foreach ($data_objects as $data_object) {
    //$data_references = db_select($R, 'r')->condition('r.pei', $data_object->id, '=')->execute();
    $data_references = db_query('select * from {' . $R . '} where pei = :pei', array(':pei' => $data_object->id));
    //_sjamayee_link_references($R, $data_references);
    _sjamayee_link_references($data_references);
  }
}

//function _sjamayee_create_sequence($S) {
function _sjamayee_create_sequence() {
  $sequence = db_insert($S)->fields(array('value' => NULL))->execute();
  return $sequence;
}

function _sjamayee_getSHA2($s) {
  return drupal_hash_base64($s);
}

//function _sjamayee_create_id($S) {
function _sjamayee_create_id() {
  //$sequence = _sjamayee_create_sequence($S);
  $sequence = _sjamayee_create_sequence();
  //**************************************************************** //Get GUID
  //**************************************************************** //Get SHA2/SHA256
  return _sjamayee_getSHA2('__@@SID@@__' . $sequence);
}

//function _sjamayee_create_type($S, $T, $fields) {
function _sjamayee_create_type($fields) {
  //$id = _sjamayee_create_id($S);
  $id = _sjamayee_create_id();
  db_insert($T)
    ->fields(array(
      'id' => $id,
      //'ver' => $fields['ver'],
      'type' => $fields['type'],
      'code' => $fields['code'],
      'name' => $fields['name'],
      'description' => $fields['description'],
      'in_use' => 'Y', //$fields['in_use'],
      'object' => $fields['object'],
      //'txi' => $fields['txi'],
      //'cbi' => 1, //$fields['cbi'],
      //'cat' => $fields['cat'],
      //'mbi' => 1, //$fields['mbi'],
      //'mat' => $fields['mat'],
    ))
    ->execute();
  return db_query('select * from {' . $T . '} where id = :id', array(':id' => $id))->fetchObject();
}

//function _sjamayee_create_text($S, $X, $fields) {
function _sjamayee_create_text($fields) {
  //$id = _sjamayee_create_id($S);
  $id = _sjamayee_create_id();
  db_insert($X)
    ->fields(array(
      'id' => $id,
      //'ver' => $fields['ver'],
      //'nid' => $fields['nid'],
      //'pid' => $fields['pid'],
      'par' => $fields['par'],
      'seq' => $fields['seq'],
      'text' => $fields['text'],
      //'cbi' => 1, //$fields['cbi'],
      //'cat' => $fields['cat'],
      //'mbi' => 1, //$fields['mbi'],
      //'mat' => $fields['mat'],
    ))
    ->execute();
  return db_query('select * from {' . $X . '} where id = :id', array(':id' => $id))->fetchObject();
}

//function _sjamayee_create_object($S, $O, $fields) {
function _sjamayee_create_object($fields) {
  //$id = _sjamayee_create_id($S);
  $id = _sjamayee_create_id();
  db_insert($O)
    ->fields(array(
      'id' => $id,
      //'ver' => $fields['ver'],
      'name' => $fields['name'],
      'tid' => $fields['tid'],
      'description' => $fields['description'],
      'mei' => $fields['mei'],
      'oid' => $fields['oid'],
      //'txi' => $fields['txi'],
      //'cbi' => 1, //$fields['cbi'],
      //'cat' => $fields['cat'],
      //'mbi' => 1, //$fields['mbi'],
      //'mat' => $fields['mat'],
    ))
    ->execute();
  return db_query('select * from {' . $O . '} where id = :id', array(':id' => $id))->fetchObject();
}

//function _sjamayee_create_reference($S, $R, $fields) {
function _sjamayee_create_reference($fields) {
  //$id = _sjamayee_create_id($S);
  $id = _sjamayee_create_id();
  db_insert($MR)
    ->fields(array(
      'id' => $id,
      //'ver' => $fields['ver'],
      'name' => $fields['name'],
      'mri' => $fields['mri'],
      'pei' => $fields['pei'],
      'cei' => $fields['cei'],
      //'pid' => $fields['pid'],
      //'nid' => $fields['nid'],
      //'txi' => $fields['txi'],
      //'cbi' => 1, //$fields['cbi'],
      //'cat' => $fields['cat'],
      //'mbi' => 1, //$fields['mbi'],
      //'mat' => $fields['mat'],
    ))
    ->execute();
  return db_query('select * from {' . $R . '} where id = :id', array(':id' => $id))->fetchObject();
}

//Link all child references for one parent by previous and next id's.
//function _sjamayee_link_references($dataset_name, $references) {
function _sjamayee_link_references($references) {
  /*$previous_reference = NULL;
  foreach ($references as $reference) {
    if (!$previous_reference) {
      $previous_reference = $reference;
      continue;
    }
    //Update pid
    db_update($R)->fields(array('pid' => $previous_reference->id))->condition('id', $reference->id, '=')->execute();
    //Update nid
    db_update($R)->fields(array('nid' => $reference->id))->condition('id', $previous_reference->id, '=')->execute();
  }*/
  $sequence = 0;
  foreach ($references as $reference) {
	$sequence = $sequence + 1;
    //Update sequence;
    db_update($R)->fields(array('seq' => $sequence))->condition('id', $reference->id, '=')->execute();
  }  
}

/***************************************************************/
/* PROJECT_PLANNING IS JUST FOR DEMO / TEST - NOT FOR REAL !!! */
/***************************************************************/
function _sjamayee_scramble_project_planning($S, $T, $X, $O, $A, $R) {
  //_sjamayee_load_project_planning_sequences($S);
  _sjamayee_load_project_planning_types($S, $T);
  //_sjamayee_load_project_planning_texts($S, $X);
  _sjamayee_load_project_planning_calendar($S, $T, $O);
  _sjamayee_load_project_planning_resource_types($S, $T, $O);
  _sjamayee_load_project_planning_projects($S, $T, $O, $R);
  _sjamayee_load_project_planning_resources($S, $T, $O, $R);
  _sjamayee_load_project_planning_projects_resources($S, $T, $O, $R);
  _sjamayee_load_project_planning_resource_usage($S, $T, $O, $R);
}

function _sjamayee_load_project_planning_types($S, $T) {
  $fields = array('type' => 'Project', 'code' => 'PROJ', 'name' => 'Project', 'description' => 'Project definition. ', 'object' => 'sja_project_planning_projects');
  //_sjamayee_create_type($S, $T, $fields);
  _sjamayee_create_type($fields);
  $fields = array('type' => 'Resource', 'code' => 'RSRC', 'name' => 'Resource', 'description' => 'Resource definition. ', 'object' => 'sja_project_planning_resources');
  _sjamayee_create_type($fields);
  $fields = array('type' => 'ProjectResource', 'code' => 'PRRS', 'name' => 'Project Resource', 'description' => 'Project Resource linkage. ', 'object' => 'sja_project_planning_projects_resources');
  _sjamayee_create_type($fields);
  $fields = array('type' => 'ResourceUsage', 'code' => 'RUSG', 'name' => 'Resource Usage', 'description' => 'Resource usage definition. ', 'object' => 'sja_project_planning_resource_usage');
  _sjamayee_create_type($fields);
  $fields = array('type' => 'ResourceType', 'code' => 'RTYP', 'name' => 'Resource Type', 'description' => 'Resource type definition. ', 'object' => 'sja_project_planning_resource_types');
  _sjamayee_create_type($fields);
  $fields = array('type' => 'CalendarDate', 'code' => 'CDAT', 'name' => 'Calendar Date', 'description' => 'Calendar date definition. ', 'object' => 'sja_project_planning_calendar');
  _sjamayee_create_type($fields);
}

function _sjamayee_load_project_planning_texts($S, $T) {
  return NULL;
}

function _sjamayee_load_project_planning_calendar($S, $T, $O) {
  $type = db_query('select * from {' . $T . '} where code = :code', array(':code' => 'CDAT'))->fetchObject();
  $dates = db_query('select * from {' . $type->object . '}')->fetchAll();
  $i = 0;
  $model_object = NULL;
  foreach ($dates as $date) {
    if ($i == 0) {
      //Calendar model object.
      $fields = array(
        'name' => $type->name,
        'tid' => $type->id,
        'description' => $type->description,
      );
      //$model_object = _sjamayee_create_object($S, $O, $fields);
      $model_object = _sjamayee_create_object($fields);
    }
    //Calendar data objects.
    $fields = array(
      'name' => $date->date,
      'description' => '',
      'mei' => $model_object->id,
      'oid' => $date->id,
    );
    //_sjamayee_create_object($S, $O, $fields);
    _sjamayee_create_object($fields);
    //Increment
    $i++;
  }
}

function _sjamayee_load_project_planning_resource_types($S, $T, $O) {
  $type = db_query('select * from {' . $T . '} where code = :code', array(':code' => 'RTYP'))->fetchObject();
  $resource_types = db_query('select * from {' . $type->object . '}')->fetchAll();
  $i = 0;
  $model_object = NULL;
  foreach ($resource_types as $resource_type) {
    if ($i == 0) {
      //ResourceType model object.
      $fields = array(
        'name' => $type->name,
        'tid' => $type->id,
        'description' => $type->description,
      );
      //$model_object = _sjamayee_create_object($S, $O, $fields);
      $model_object = _sjamayee_create_object($fields);
    }
    //ResourceType data objects.
    $fields = array(
      'name' => $resource_type->name,
      'description' => '',
      'mei' => $model_object->id,
      'oid' => $resource_type->id,
    );
    //_sjamayee_create_object($S, $O, $fields);
    _sjamayee_create_object($fields);
    //Increment
    $i++;
  }
}

function _sjamayee_load_project_planning_projects($S, $T, $O, $R) {
  $type = db_query('select * from {' . $T . '} where code = :code', array(':code' => 'PROJ'))->fetchObject();
  $projects = db_query('select * from {' . $type->object . '}')->fetchAll();
  $i = 0;
  $model_object = NULL;
  foreach ($projects as $project) {
    if ($i == 0) {
      //Project model object.
      $fields = array(
        'name' => $type->name,
        'tid' => $type->id,
        'description' => $type->description,
      );
      //$model_object = _sjamayee_create_object($S, $O, $fields);
      $model_object = _sjamayee_create_object($fields);
      //Get calendar date type.
      $dateType = db_query('select * from {' . $T . '} where code = :code', array(':code' => 'CDAT'))->fetchObject();
      //Project_StartDate model object.
      $fields = array(
        'name' => 'ProjectStartDate',
        'tid' => $dateType->id,
        'description' => 'Project start date. ',
      );
      //$model_object_project_startDate = _sjamayee_create_object($S, $O, $fields);
      $model_object_project_startDate = _sjamayee_create_object($fields);
      //Project_StartDate model reference.
      $fields = array(
        'name' => 'ProjectStartDate',
        'pei' => $model_object->id,
        'cei' => $model_object_project_startDate->id,
      );
      //$model_reference_project_startDate = _sjamayee_create_reference($S, $R, $fields);
      $model_reference_project_startDate = _sjamayee_create_reference($fields);
      //Project_EndDate model object.
      $fields = array(
        'name' => 'ProjectEndDate',
        'tid' => $dateType->id,
        'description' => 'Project end date. ',
      );
      //$model_object_project_endDate = _sjamayee_create_object($S, $O, $fields);
      $model_object_project_endDate = _sjamayee_create_object($fields);
      //Project_EndDate model reference.
      $fields = array(
        'name' => 'ProjectEndDate',
        'pei' => $model_object->id,
        'cei' => $model_object_project_endDate->id,
        'pid' => $model_reference_project_startDate->id,
      );
      //$model_reference_project_endDate = _sjamayee_create_reference($S, $R, $fields);
      $model_reference_project_endDate = _sjamayee_create_reference($fields);
      //Update nid.
      $model_reference_project_startDate->nid = $model_reference_project_endDate->id;
      db_update($R)
        ->fields(array('nid' => $model_reference_project_startDate->nid))
        ->condition('id', $model_reference_project_startDate->id)
        ->execute();
    }
    //Project data object.
    $fields = array(
      'name' => $project->name,
      'description' => $project->description,
      'mei' => $model_object->id,
      'oid' => $project->id,
    );
    //$data_object = _sjamayee_create_object($S, $O, $fields);
    $data_object = _sjamayee_create_object($fields);
    //Project_Start_Date data reference.
    $data_object_startDate = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                      'left join {' . $T . '} t on mo.tid = t.id where t.code = :code and do.oid = :start_date_id',
                                      array(':code' => 'CDAT', ':start_date_id' => $project->start_date_id))->fetchObject();
/*
    $data_object_startDate = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                      ' where mo.id = :model_object_project_startDate_id and do.oid = :start_date_id',
                                      array(':model_object_project_startDate_id' => $model_object_project_startDate->id,
                                            ':start_date_id' => $project->start_date_id))->fetchObject();*/
    $fields = array(
      'name' => $project->name . '_StartDate',
      'mri' => $model_reference_project_startDate->id,
      'pei' => $data_object->id,
      'cei' => $data_object_startDate->id,
    );
    //$data_reference_project_startDate = _sjamayee_create_reference($S, $R, $fields);
    $data_reference_project_startDate = _sjamayee_create_reference($fields);
    //Project_End_Date data reference.
    $data_object_endDate = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                    'left join {' . $T . '} t on mo.tid = t.id where t.code = :code and do.oid = :end_date_id',
                                    array(':code' => 'CDAT', ':end_date_id' => $project->end_date_id))->fetchObject();
/*
    $data_object_endDate = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                    ' where mo.id = :model_object_project_endDate_id and do.oid = :end_date_id',
                                    array(':model_object_project_endDate_id' => $model_obect_project_endDate->id,
                                          ':end_date_id' => $project->end_date_id))->fetchObject();*/
    $fields = array(
      'name' => $project->name . '_EndDate',
      'mri' => $model_reference_project_endDate->id,
      'pei' => $data_object->id,
      'cei' => $data_object_endDate->id,
      'pid' => $data_reference_project_startDate->id,
    );
    //$data_reference_project_endDate = _sjamayee_create_data_reference($S, $DR, $fields);
    $data_reference_project_endDate = _sjamayee_create_data_reference($fields);
    //Update nid.
    $data_reference_project_startDate->nid = $data_reference_project_endDate->id;
    db_update($R)
      ->fields(array('nid' => $data_reference_project_startDate->nid))
      ->condition('id', $data_reference_project_startDate->id)
      ->execute();
    //Increment
    $i++;
  }
}

function _sjamayee_load_project_planning_resources($S, $T, $O, $R) {
  $type = db_query('select * from {' . $T . '} where code = :code', array(':code' => 'RSRC'))->fetchObject();
  $resources = db_query('select * from {' . $type->object . '}')->fetchAll();
  $i = 0;
  $model_object = NULL;
  foreach ($resources as $resource) {
    if ($i == 0) {
      //Resource model object.
      $fields = array(
        'name' => $type->name,
        'tid' => $type->id,
        'description' => $type->description,
      );
      //$model_object = _sjamayee_create_object($S, $O, $fields);
      $model_object = _sjamayee_create_object($fields);
      //Resource_Type model reference.
      $model_object_type = db_query('select mo.* from {' . $O . '} mo left join {' . $T . '} t on mo.tid = t.id ' .
                                    'where  t.code = :code', array(':code' => 'RTYP'))->fetchObject();
      $fields = array(
        'name' => 'ResourceType',
        'pei' => $model_object->id,
        'cei' => $model_object_type->id,
      );
      //$model_reference_resource_type = _sjamayee_create_reference($S, $R, $fields);
      $model_reference_resource_type = _sjamayee_create_reference($fields);
    }
    //Resource data object.
    $fields = array(
      'name' => $resource->name,
      'description' => '',
      'mei' => $model_object->id,
      'oid' => $resource->id,
    );
    //$data_object = _sjamayee_create_object($S, $O, $fields);
    $data_object = _sjamayee_create_object($fields);
    //Resource_Type data reference.
    $data_object_type = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                 'left join {' . $T . '} t on me.tid = t.id where  t.code = :code and do.oid = :type_id',
                                 array(':code' => 'RTYP', ':type_id' => $resource->type_id))->fetchObject();
    $fields = array(
      'name' => $resource->name . '_Type',
      'mri' => $model_reference_resource_type->id,
      'pei' => $data_object->id,
      'cei' => $data_object_type->id,
    );
    //_sjamayee_create_reference($S, $R, $fields);
    _sjamayee_create_reference($fields);
    //Increment
    $i++;
  }
}

function _sjamayee_load_project_planning_projects_resources($S, $T, $O, $R) {
  $type = db_query('select * from {' . $T . '} where code = :code', array(':code' => 'PRRS'))->fetchObject();
  $projects_resources = db_query('select * from {' . $type->object . '}')->fetchAll();
  $i = 0;
  $model_object = NULL;
  foreach ($projects_resources as $project_resource) {
    if ($i == 0) {
      //ProjectResource model object.
      $fields = array(
        'name' => $type->name,
        'tid' => $type->id,
        'description' => $type->description,
      );
      //$model_object = _sjamayee_create_object($S, $O, $fields);
      $model_object = _sjamayee_create_object($fields);
      //ProjectResource_Project model reference.
      $model_object_project = db_query('select mo.* from {' . $O . '} mo left join {' . $T . '} t on mo.tid = t.id ' .
                                        'where  t.code = :code', array(':code' => 'PROJ'))->fetchObject();
      $fields = array(
        'name' => 'ProjectResourceProject',
        'pei' => $model_object->id,
        'cei' => $model_object_project->id,
      );
      //$model_reference_projectResource_project = _sjamayee_create_reference($S, $R, $fields);
      $model_reference_projectResource_project = _sjamayee_create_reference($fields);
      //ProjectResource_Resource model reference.
      $model_object_resource = db_query('select mo.* from {' . $O . '} mo left join {' . $T . '} t on mo.tid = t.id ' .
                                        'where  t.code = :code', array(':code' => 'RSRC'))->fetchObject();
      $fields = array(
        'name' => 'ProjectResourceResource',
        'pei' => $model_object->id,
        'cei' => $model_object_resource->id,
        'pid' => $model_reference_projectResource_project->id,
      );
      //$model_reference_projectResource_resource = _sjamayee_create_reference($S, $R, $fields);
      $model_reference_projectResource_resource = _sjamayee_create_reference($fields);
      //Update nid.
      $model_reference_projectResource_project->nid = $model_reference_projectResource_resource->id;
      db_update($R)
        ->fields(array('nid' => $model_reference_projectResource_project->nid))
        ->condition('id', $model_reference_projectResource_project->id)
        ->execute();
    }
    //ProjectResource data objects.
    $fields = array(
      'name' => 'P_' . $project_resource->project_id . '_R_' . $project_resource->resource_id,
      'description' => '',
      'mei' => $model_object->id,
      'oid' => $project_resource->id,
    );
    //$data_object = _sjamayee_create_object($S, $O, $fields);
    $data_object = _sjamayee_create_object($fields);
    //ProjectResource_Project data reference.
    $data_object_project = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                    'left join {' . $T . '} t on mo.tid = t.id where  t.code = :code and do.oid = :project_id',
                                    array(':code' => 'PROJ', ':project_id' => $project_resource->project_id))->fetchObject();
    $fields = array(
      'name' => $data_object_project->name, //'ProjectResource_Project',
      'mri' => $model_reference_projectResource_project->id,
      'pei' => $data_object->id,
      'cei' => $data_object_project->id,
    );
    //$data_reference_projectResource_project = _sjamayee_create_reference($S, $R, $fields);
    $data_reference_projectResource_project = _sjamayee_create_reference($fields);
    //ProjectResource_Resource data reference.
    $data_object_resource = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                     'left join {' . $T . '} t on mo.tid = t.id where  t.code = :code and do.oid = :resource_id',
                                     array(':code' => 'RSRC', ':resource_id' => $project_resource->resource_id))->fetchObject();
    $fields = array(
      'name' => $data_object_resource->name, //'ProjectResource_Resource',
      'mri' => $model_reference_projectResource_resource->id,
      'pei' => $data_object->id,
      'cei' => $data_object_resource->id,
      'pid' => $data_reference_projectResource_project->id,
    );
    //$data_reference_projectResource_resource = _sjamayee_create_reference($S, $R, $fields);
    $data_reference_projectResource_resource = _sjamayee_create_reference($fields);
    //Update nid in reference.
    $data_reference_projectResource_project->nid = $data_reference_projectResource_resource->id;
    db_update($R)
      ->fields(array('nid' => $data_reference_projectResource_project->nid))
      ->condition('id', $data_reference_projectResource_project->id)
      ->execute();
    //Update name in data_object.
    db_update($O)
      ->fields(array('name' => $data_object_project->name . ' - ' . $data_object_resource->name))
      ->condition('id', $data_object->id)
      ->execute();
    //Increment
    $i++;
  }
}

function _sjamayee_load_project_planning_resource_usage($S, $T, $O, $R) {
  $type = db_query('select * from {' . $T . '} where code = :code', array(':code' => 'RUSG'))->fetchObject();
  $resource_usages = db_query('select * from {' . $type->object . '}')->fetchAll();
  $i = 0;
  $model_object = NULL;
  foreach ($resource_usages as $resource_usage) {
    if ($i == 0) {
      //ResourceUsage model object.
      $fields = array(
        'name' => $type->name,
        'tid' => $type->id,
        'description' => $type->description,
      );
      //$model_object = _sjamayee_create_object($S, $O, $fields);
      $model_object = _sjamayee_create_object($fields);
      //ResourceUsage_ProjectResource model reference.
      $model_object_projectResource = db_query('select mo.* from {' . $O . '} mo left join {' . $T . '} t on mo.tid = t.id ' .
                                               'where  t.code = :code', array(':code' => 'PRRS'))->fetchObject();
      $fields = array(
        'name' => 'ResourceUsageProjectResource',
        'pei' => $model_object->id,
        'cei' => $model_object_projectResource->id,
      );
      //$model_reference_resourceUsage_projectResource = _sjamayee_create_reference($S, $R, $fields);
      $model_reference_resourceUsage_projectResource = _sjamayee_create_reference($fields);
      //Get calendar date type.
      $dateType = db_query('select * from {' . $T . '} where code = :code', array(':code' => 'CDAT'))->fetchObject();
      //ResourceUsage_Date model object.
      $fields = array(
        'name' => 'ResourceUsageDate',
        'tid' => $dateType->id,
        'description' => 'Resource usage date. ',
      );
      //$model_object_resourceUsage_date = _sjamayee_create_object($S, $O, $fields);
      $model_object_resourceUsage_date = _sjamayee_create_object($fields);
      //ResourceUsage_Date model reference.
      $fields = array(
        'name' => 'ResourceUsageDate',
        'pei' => $model_object->id,
        'cei' => $model_object_resourceUsage_date->id,
      );
      //$model_reference_resourceUsage_date = _sjamayee_create_reference($S, $R, $fields);
      $model_reference_resourceUsage_date = _sjamayee_create_reference($fields);
    }
    //ResourceUsage data object.
    $fields = array(
      'name' => 'ResourceUsage', //NOK -> project->name . resource->name !!!
      'description' => '',
      'mei' => $model_object->id,
      'oid' => $resource_usage->id,
    );
    //$data_object = _sjamayee_create_object($S, $O, $fields);
    $data_object = _sjamayee_create_object($fields);
    //ResourceUsage_ProjectResource data reference.
    $data_object_projectResource = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                            'left join {' . $T . '} t on mo.tid = t.id where  t.code = :code and do.oid = :project_resource_id',
                                            array(':code' => 'PRRS', ':project_resource_id' => $resource_usage->project_resource_id))->fetchObject();
    $fields = array(
      'name' => $data_object_projectResource->name, //'ResourceUsage_ProjectResource',
      'mri' => $model_reference_resourceUsage_projectResource->id,
      'pei' => $data_object->id,
      'cei' => $data_object_projectResource->id,
    );
    //$data_reference_resourceUsage_projectResource = _sjamayee_create_reference($S, $R, $fields);
    $data_reference_resourceUsage_projectResource = _sjamayee_create_reference($fields);
    //ResourceUsage_Date data reference.
    $data_object_resourceUsage_date = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                               'left join {' . $T . '} t on me.tid = t.id where t.code = :code and do.oid = :resourceUsage_date_id',
                                               array(':code' => 'CDAT', ':resourceUsage_date_id' => $resource_usage->date_id))->fetchObject();
/*
    $data_object_resourceUsage_date = db_query('select do.* from {' . $O . '} do left join {' . $O . '} mo on do.mei = mo.id ' .
                                                ' where mo.id = :model_object_resourceUsage_date_id and do.oid = :resourceUsage_date_id',
                                               array(':model_object_resourceUsage_data_id' => $model_object_resourceUsage_date->id,
                                                     ':resourceUsage_date_id' => $resource_usage->date_id))->fetchObject();*/
    $fields = array(
      'name' => $data_object_resourceUsage_date->name, //'ResourceUsage_Date',
      'mri' => $model_reference_resourceUsage_date->id,
      'pei' => $data_object->id,
      'cei' => $data_object_resourceUsage_date->id,
      'pid' => $data_reference_resourceUsage_projectResource->id,
    );
    //$data_reference_resourceUsage_date = _sjamayee_create_reference($S, $R, $fields);
    $data_reference_resourceUsage_date = _sjamayee_create_reference($fields);
    //Update nid in reference.
    $data_reference_resourceUsage_projectResource->nid = $data_reference_resourceUsage_date->id;
    db_update($R)
      ->fields(array('nid' => $data_reference_resourceUsage_projectResource->nid))
      ->condition('id', $data_reference_resourceUsage_projectResource->id)
      ->execute();
    //Update name in data_object.
    db_update($O)
      ->fields(array('name' => $data_object_projectResource->name . ' - ' . $data_object_resourceUsage_date->name))
      ->condition('id', $data_object->id)
      ->execute();
    //Increment
    $i++;
  }
}

//function _sjamayee_scramble_drupal($S, $T, $X, $ME, $MA, $MR, $DE, $DA, $DR) {
function _sjamayee_scramble_drupal($S, $T, $X, $O, $A, $R) {
  //Define drupal datasets.
  $C    = 'comment';
  $FC   = 'field_config';
  $FCI  = 'field_config_instance';
  $M    = 'menu_custom';
  $N    = 'node';
  $NT   = 'node_type';
  $TTD  = 'taxonomy_term_data';

  //Define types.
  $TYPE_BUNDLE = 'BUND';
  $TYPE_COMMENT = 'COMM';
  $TYPE_FIELD = 'FLD';
  $TYPE_MENU = 'MENU';
  $TYPE_MODULE = 'MODU';
  $TYPE_NODE = 'NODE';
  $TYPE_TAXONOMY = 'TAXO';
/*
  //Clear datasets.
  db_delete($S)->execute();
  db_delete($T)->execute();
  //db_delete($X)->execute();
  db_delete($ME)->execute();
  //db_delete($MA)->execute();
  db_delete($MR)->execute();
  db_delete($DE)->execute();
  //db_delete($DA)->execute();
  db_delete($DR)->execute();*/
  //************
  //Create Types
  //************
  $fields = array('type' => 'Menu', 'code' => $TYPE_MENU, 'name' => 'Menu', 'description' => 'Menu', 'object' => 'undefined');
  //_sjamayee_create_type($S, $T, $fields);
  _sjamayee_create_type($fields);
  $fields = array('type' => 'Node', 'code' => $TYPE_NODE, 'name' => 'Node', 'description' => 'Node', 'object' => $N);
  _sjamayee_create_type($fields);
  $fields = array('type' => 'Comment', 'code' => $TYPE_COMMENT, 'name' => 'Comment', 'description' => 'Comment', 'object' => 'undefined');
  _sjamayee_create_type($fields);
  $fields = array('type' => 'Taxonomy', 'code' => $TYPE_TAXONOMY, 'name' => 'Taxonomy Term', 'description' => 'Taxonomy term', 'object' => 'undefined');
  _sjamayee_create_type($fields);
  $fields = array('type' => 'Field', 'code' => $TYPE_FIELD, 'name' => 'Field', 'description' => 'Field', 'object' => $FC);
  _sjamayee_create_type($fields);
  $fields = array('type' => 'Bundle', 'code' => $TYPE_BUNDLE, 'name' => 'Bundle', 'description' => 'Bundle', 'object' => 'undefined');
  _sjamayee_create_type($fields);
  $fields = array('type' => 'Module', 'code' => $TYPE_MODULE, 'name' => 'Module', 'description' => 'Module', 'object' => 'undefined');
  _sjamayee_create_type($fields);

  //************
  //Create Texts
  //************
  //Example text, but not needed for this demo.
  $fields = array(
    'par' => 'p01',
    'seq' => 1,
    'text' => 'This is a long text. ',
    'object' => 'undefined');
  //_sjamayee_create_text($S, $X, $fields);
  _sjamayee_create_text($fields);

  //**********************************************************************
  //Create Model Objects: Node,Comment,Taxonomy,Field,Module,Bundle,Entity
  //**********************************************************************
  $model_objects = array();
  $mos = db_query('select id as tid from {' . $T . '}' .
                  ' where code = :code', array(':code' => $TYPE_MENU));
  foreach ($mos as $mo) {
    $mo->name = drupal_strtolower($TYPE_MENU);
    $mo->description = drupal_ucfirst(drupal_strtolower($TYPE_MENU));
    $model_objects[] = $mo;
  }
  $mos = db_query('select nt.type name,t.id as tid,nt.name description from {' . $T . '} t, {' . $NT . '} nt ' .
                  ' where t.code = :code', array(':code' => $TYPE_NODE));
  foreach ($mos as $mo) {
    $model_objects[] = $mo;
  }
  $mos = db_query('select id as tid from {' . $T . '} ' .
                  ' where code = :code', array(':code' => $TYPE_COMMENT));
  foreach ($mos as $mo) {
    $mo->name = 'comment';
    $mo->description = 'Comment description';
    $model_objects[] = $mo;
  }
  $mos = db_query('select id as tid from {' . $T . '} ' .
                  ' where code = :code', array(':code' => $TYPE_TAXONOMY));
  foreach ($mos as $mo) {
    $mo->name = 'taxonomy_term';
    $mo->description = 'Taxonomy term';
    $model_objects[] = $mo;
  }
  $mos = db_query('select fc.field_name name,t.id as tid,fc.field_name description from {' . $T . '} t, {' . $FC . '} fc ' .
                  ' where t.code = :code', array(':code' => $TYPE_FIELD));
  foreach ($mos as $mo) {
    $model_objects[] = $mo;
  }
  $mos = db_query('select id as tid from {' . $T . '} ' .
                  ' where code = :code', array(':code' => $TYPE_MODULE));
  foreach ($mos as $mo) {
    $mo->name = 'module';
    $mo->description = 'Module';
    $model_objects[] = $mo;
  }
  $mos = db_query('select id as tid from {' . $T . '} ' .
                  ' where code = :code', array(':code' => $TYPE_BUNDLE));
  foreach ($mos as $mo) {
    $mo->name = 'bundle';
    $mo->description = 'Bundle';
    $model_objects[] = $mo;
  }
  //Finally create model objects!
  foreach ($model_objects as $model_object) {
    $fields = array(
      'name' => $model_object->name,
      'tid' => $model_object->tid,
      'description' => $model_object->description,
    );
    //_sjamayee_create_model_object($S, $O, $fields);
    _sjamayee_create_model_object($fields);
  }

  //************************
  //Create Model References.
  //************************
  $model_references = array();
  //Menu_Menu
  $mrs = db_query('select pmo.name as pmo_name,cmo.name as cmo_name, ' .
                  '       pmo.id as pei,cme.id as cei ' .
                  '  from {' . $T . '} pt, {' . $O . '} pmo, ' .
                  '       {' . $T . '} ct, {' . $O . '} cmo  ' .
                  ' where pt.code = :pt_code and ' .
                  '       pt.id = pmo.tid and ' .
                  '       ct.code = :ct_code and ' .
                  '       ct.id = cmo.tid', array(':pt_code' => $TYPE_MENU, ':ct_code' => $TYPE_MENU));
  foreach ($mrs as $mr) {
    $model_reference->name = $mr->pmo_name . '_' . $mr->cmo_name;
    $model_reference->pei = $mr->pei;
    $model_reference->cei = $mr->cei;
    array_push($model_references, $model_reference);
  }
  //Node_Comment
  $mrs = db_query('select pmo.name as pmo_name, cmo.name as cmo_name, ' .
                  '       pmo.id as pei,cmo.id as cei ' .
                  '  from {' . $T . '} pt, {' . $O . '} pmo, ' .
                  '       {' . $T . '} ct, {' . $O . '} cmo  ' .
                  ' where pt.code = :pt_code and ' .
                  '       pt.id = pmo.tid and ' .
                  '       ct.code = :ct_code and ' .
                  '       ct.id = cmo.tid', array(':pt_code' => $TYPE_NODE, ':ct_code' => $TYPE_COMMENT));
  foreach ($mrs as $mr) {
    $model_reference->name = $mr->pmo_name . '_' . $mr->cmo_name;
    $model_reference->pei = $mr->pei;
    $model_reference->cei = $mr->cei;
    array_push($model_references, $model_reference);
  }
/*
  //Taxonomy_Field, Comment_Field, Node_Field
  $mrs = db_query('select pmo.name as pmo_name,cmo.name as cmo_name, ' .
                  '       pmo.id as pei,cmo.id as cei ' .
                  '  from {' . $T . '} pt, {' . $O . '} pmo, {' . $FCI . '} fci, ' .
                  '       {' . $T . '} ct, {' . $O . '} cmo  ' .
                  ' where ct.code = :ct_code and ' .
                  '       ct.id = cmo.tid and ' .
                  '       cmo.name = fci.field_name and ' .
                  '       ((fci.entity_type = pmo.name and pmo.tid = pt.id and pt.code in ("' . $TYPE_TAXONOMY . '","' . $TYPE_COMMENT . '")) or ' .
                  '        (fci.bundle = pmo.name and pmo.tid = pt.id and pt.code = "' . $TYPE_NODE . '"))',
                  array(':pt_code' => $TYPE_NODE, ':ct_code' => $TYPE_FIELD));*/
/*
  //Module_Field
  $mrs = db_query('select pmo.name as pmo_name,cmo.name as cmo_name, ' .
                  '       pmo.id as pei,cmo.id a cei ' .
                  '  from {' . $T . '} pt, {' . $ME . '} pmo, ' .
                  '       {' . $T . '} ct, {' . $ME . '} cmo  ' .
                  ' where pt.code = :pt_code and ' .
                  '       pt.id = pmo.tid and ' .
                  '       ct.code = :ct_code and ' .
                  '       ct.id = cmo.tid', array(':pt_code' => $TYPE_MODULE, ':ct_code' => $TYPE_FIELD));*/
  foreach ($mrs as $mr) {
    $model_reference->name = $mr->pmo_name . '_' . $mr->cmo_name;
    $model_reference->pei = $mr->pei;
    $model_reference->cei = $mr->cei;
    array_push($model_references, $model_reference);
  }
  //Bundle_Field
  $mrs = db_query('select pmo.name as pmo_name,cmo.name as cmo_name, ' .
                  '       pmo.id as pei,cmo.id as cei ' .
                  '  from {' . $T . '} pt, {' . $O . '} pmo, ' .
                  '       {' . $T . '} ct, {' . $O . '} cmo  ' .
                  ' where pt.code = :pt_code and ' .
                  '       pt.id = pmo.tid and ' .
                  '       ct.code = :ct_code and ' .
                  '       ct.id = cmo.tid', array(':pt_code' => $TYPE_BUNDLE, ':ct_code' => $TYPE_FIELD));
  foreach ($mrs as $mr) {
    $model_reference->name = $mr->pmo_name . '_' . $mr->cmo_name;
    $model_reference->pei = $mr->pei;
    $model_reference->cei = $mr->cei;
    array_push($model_references, $model_reference);
  }
  //And finally - Create!
  foreach ($model_references as $model_reference) {
    $fields = array(
      'name' => $model_reference->name,
      'pei' => $model_reference->pei,
      'cei' => $model_reference->cei,
    );
    //_sjamayee_create_model_reference($S, $R, $fields);
    _sjamayee_create_reference($fields);
  }
/*
  //TODO: Check links !!!
  //***********************************************************
  //Link Model Relations / All children for each parent object.
  //***********************************************************
  $model_objects = db_select($O)->execute();
  foreach ($model_objects as $model_object) {
    $model_references = db_select($R, 'mr')->condition('mr.pei', $model_object->id, '=')->execute();
    //_sjamayee_link_references($MR, $model_references);
    _sjamayee_link_references($model_references);
  }
  //TODO *********************************************************************************************************************** TODO !!!
  //Link MENU model references.
  /*$references = db_query('select * from {' . $R . '} mr, {' . $O . '} mo, {' . $T . '} t ' .
                           ' where t.code = :code and ' .
                           '       t.id = mo.tid and ' .
                           '       mr.pei = mo.id', array(':code' => $TYPE_MENU))->fetch();
  //_link_references($R, $references);
  _link_references($references);*/
  //************************************************
  //Create Data Objects: Node,Comment,Taxonomy,Field
  //************************************************
  $data_objects = array();
/*
  //Menus
  $data_objects += db_query('select m.menu_name as name,m.title as description,mo.id as mei,1 as oid ' .
                            '  from {' . $T . '} t, {' . $O . '} mo, {' . $M . '} m ' .
                            ' where t.code = "' . $TYPE_MENU . '" and ' .
                            '       t.id = mo.tid');
  //Nodes
  $data_objects += db_query('select n.title as n ame,"" as description,mo.id as mei,n.nid as oid ' .
                            '  from {' . $T . '} t, {' . $O . '} mo, {' . $N . '} n ' .
                            ' where t.code = "' . $TYPE_NODE . '" and ' .
                            '       t.id = mo.tid ' .
                            '       mo.name = n.type');
  //Taxonomy
  $data_objects += db_query('select ttd.name as name,ttd.description as description,mo.id as mei,ttd.tid as oid ' .
                            '  from {' . $T . '} t, {' . $O . '} mo, {' . $TTD . '} ttd ' .
                            ' where t.code = "' . $TYPE_TAXONOMY . '" and ' .
                            '       t.id = mo.tid');
  //Comments
  $data_objects += db_query('select c.subject as name,c.subject as description,mo.id as mei,c.cid as oid ' .
                            '  from {' . $T . '} t, {' . $O . '} mo, {' . $C . '} c ' .
                            ' where t.code = "' . $TYPE_COMMENT . '" and ' .
                            '       t.id = mo.tid');
  //Modules
  $data_objects += db_query('select max(fc.module) as name,max(fc.module) as description,mo.id as mei,1 as oid ' .
                            '  from {' . $T . '} t, {' . $O . '} mo, {' . $FC . '} fc ' .
                            ' where t.code = "' . $TYPE_MODULE . '" and ' .
                            '       t.id = mo.tid' .
                            'group by fc.module');
  //Bundles
  $data_objects += db_query('select max(fci.bundle) as name,max(fci.bundle) as description,mo.id as mei,1 as oid ' .
                            '  from {' . $T . '} t, {' . $O . '} mo, {' . $FCI . '} fci ' .
                            ' where t.code = "' . $TYPE_BUNDLE . '" and ' .
                            '       t.id = mo.tid' .
                            'group by fci.bundle');*/
  //Create
  foreach ($data_objects as $data_object) {
    $fields = array(
      'name' => $data_object->name,
      'description' => $data_object->description,
      'mei' => $data_object->mei,
      'oid' => $data_object->oid,
    );
    //_sjamayee_create_data_object($S, $O, $fields);
    _sjamayee_create_object($fields);
  }

  //Fields                        *** TODO / ALREADY PREPARED !!! ***
  $fieldName = NULL;
  $fieldNames = db_query('select fc.field_name from {' . $T . '} t, {' . $O . '} mo, {' . $FC . '} fc ' .
                         ' where t.code = :code and t.id = mo.tid and mo.name = fc.field_name', array(':code' => $TYPE_FIELD));
  $fieldDataSetName = 'field_data_' . $fieldName;
  $fieldValueName = $fieldName . '_value';
  $data_references = array();
/*
  foreach ($fieldNames as $fieldName) {
    $fieldData = db_query('select entity_type,bundle,deleted,entity_id,revision_id, ' . $fieldValueName. ' as field_value ' .
                          '  from ' . $fieldDataSetName);
    foreach ($fieldData as $data) {
      //Insert Data Entity - Field  ----------------------------------------------- *** GET THE LATEST VERSION !!! **** ONLY 1 ***
      $data_object = db_query('select ' . $data->field_value. ' as name, ' .
                              concat($fieldValueName, '_', $data->field_value). ' as description,mo.id as mei,fc.id as oid ' .
                              '  from {' . $T . '} t, {' . $O . '} mo, {' . $FC . '} fc ' .
                              ' where t.code = "' . $TYPE_FIELD . '" and ' .
                              '       t.id = mo.tid and ' .
                              '       mo.name = fc.field_name and ' .
                              '       fc.field_name = :fieldName', array(':fieldName' => $fieldName));
      //Create.
      $fields = array(
        'name' => $data_object->name,
        'description' => $data_object->description,
        'mei' => $data_object->mei,
        'oid' => $data_object->oid,
      );
      //_sjamayee_create_data_object($S, $O, $fields);
      _sjamayee_create_object($fields);

      //Get Data Relations - Module_Field
      $data_references += db_query('select concat(pdo.name,"_",cmo.name) as name, ' .
                                   '       mr.id as mri,pdo.id as pei,cdo.id as cei ' .
                                   '  from {' . $T . '} pt, {' . $O . '} pmo, {' . $O . '} pdo, ' .
                                   '       {' . $T . '} ct, {' . $O . '} cmo, {' . $O . '} cdo, ' .
                                   '       {' . $R . '} mr, {' . $FC . '} fc ' .
                                   ' where pt.code = "' .$TYPE_MODULE. '" and ' .
                                   '       pt.id = pmo.tid and ' .
                                   '       pdo.name = fc.module and ' .
                                   '       pmo.id = mr.pei and ' .
                                   '       pmo.id = pdo.mei and ' .
                                   '       ct.code = "' . $TYPE_FIELD . '" and ' .
                                   '       ct.id = cmo.tid and ' .
                                   '       cdo.name = fc.field_name and ' .
                                   '       cmo.id = mr.cei and ' .
                                   '       cmo.id = cdo.mei and ' .
                                   '       cdo.oid = fc.id and ' .
                                   '       fc.field_name = :fieldName', array(':fieldName' => $fieldName));
      //Get Data Relations - Bundle_Field
      $data_references += db_query('select concat(pdo.name,"_",cmo.name) as name, ' .
                                   '       mr.id as mri,pdo.id,cdo.id as cei ' .
                                   '  from {' . $T . '} pt, {' . $O . '} pmo, {' . $O . '} pdo, ' .
                                   '       {' . $T . '} ct, {' . $O . '} cmo, {' . $O . '} cdo, ' .
                                   '       {' . $MR . '} mr, {' . $FCI . '} fci ' .
                                   ' where pt.code = "' . $TYPE_BUNDLE . '" and ' .
                                   '       pt.id = pmo.tid and ' .
                                   '       pdo.name = fci.bundle and ' .
                                   '       pmo.id = mr.pei and ' .
                                   '       pmo.id = pdo.mei and ' .
                                   '       ct.code = "' . $TYPE_FIELD . '" and ' .
                                   '       ct.id = cmo.tid and ' .
                                   '       cdo.name = fci.field_name and ' .
                                   '       cmo.id = mr.cei and ' .
                                   '       cmo.id = cdo.mei and ' .
                                   '       cdo.oid = fci.field_id and ' .
                                   '       fci.field_name = :fieldName', array(':fieldName' => $fieldName));
      //Get Data Relations - Entity_Field (Comment, Taxonomy, Nodes...)
      //Comments
      $data_references += db_query('select concat(pdo.name,"_",cmo.name) as name, ' .
                                   '       mr.id as mri,pdo.id as pei,cdo.id as cei ' .
                                   '  from {' . $T . '} pt, {' . $O . '} pmo, {' . $O . '} pdo, ' .
                                   '       {' . $T . '} ct, {' . $O . '} cmo, {' . $O . '} cdo, ' .
                                   '       {' . $MR . '} mr, {' . $FCI . '} fci ' .
                                   ' where pt.code = "' . $TYPE_COMMENT . '" and ' .
                                   '       pt.id = pmo.tid and ' .
                                   '       pdo.name = fci.entity_type and ' .
                                   '       pmo.id = mr.pei and ' .
                                   '       pmo.id = pdo.mei and ' .
                                   '       ct.code = "' . $TYPE_FIELD . '" and ' .
                                   '       ct.id = cmo.tid and ' .
                                   '       cdo.name = fci.field_name and ' .
                                   '       cmo.id = mr.cei and ' .
                                   '       cmo.id = cdo.mei and ' .
                                   '       cdo.oid = fci.field_id and ' .
                                   '       fci.field_name = :fieldName', array(':fieldName' => $fieldName));
      //Taxonomy terms
      $data_references += db_query('select concat(pdo.name,"_",cmo.name) as name, ' .
                                   '        mr.id as mri,pdo.id as pei,cdo.id as cei ' .
                                   '  from {' . $T . '} pt, {' . $O . '} pmo, {' . $O . '} pdo, ' .
                                   '       {' . $T . '} ct, {' . $O . '} cmo, {' . $O . '} cdo, ' .
                                   '       {' . $MR . '} mr, {' . $FCI . '} fci ' .
                                   ' where pt.code = "' . $TYPE_TAXONOMY . '" and ' .
                                   '       pt.id = pmo.tid and ' .
                                   '       pdo.name = fci.entity_type and ' .
                                   '       pmo.id = mr.pei and ' .
                                   '       pmo.id = pdo.mei and ' .
                                   '       ct.code = "' . $TYPE_FIELD . '" and ' .
                                   '       ct.id = cmo.tid and ' .
                                   '       cdo.name = fci.field_name and ' .
                                   '       cmo.id = mr.cei and ' .
                                   '       cmo.id = cdo.mei and ' .
                                   '       cdo.oid = fci.field_id and ' .
                                   '       fci.field_name = :fieldName', array(':fieldName' => $fieldName));
      //Nodes (like: Article, Page, Recipe, ...)
      $data_references += db_query('select concat(pdo.name,"_",cmo.name) as name, ' .
                                   '        mr.id as mri,pdo.id as pei,cdo.id as cei ' .
                                   '  from {' . $T . '} pt, {' . $O . '} pmo, {' . $O . '} pdo, ' .
                                   '       {' . $T . '} ct, {' . $O . '} cmo, {' . $O . '} cdo, ' .
                                   '       {' . $MR . '} mr, {' . $FCI . '} fci ' .
                                   ' where pt.code = "' . $TYPE_NODE . '" and ' .
                                   '       pt.id = pmo.tid and ' .
                                   '       fci.entity_type = $N and ' .
                                   '       pmo.id = mr.pei and ' .
                                   '       pmo.id = pdo.mei and ' .
                                   '       ct.code = "' . $TYPE_FIELD . '" and ' .
                                   '       ct.id = cmo.tid and ' .
                                   '       cdo.name = fci.field_name and ' .
                                   '       cmo.id = mr.cei and ' .
                                   '       cmo.id = cdo.mei and ' .
                                   '       cdo.oid = fci.field_id and ' .
                                   '       fci.field_name = :fieldName', array(':fieldName' => $fieldName));
    }
    //Get Data Relations - Node_Comment
    $data_references += db_query('select concat(n.title,"_",c.subject) as name, ' .
                                 '        mr.id as mri,pdo.id as pei,cdo.id as cei ' .
                                 '  from {' . $T . '} pt, {' . $O . '} pdo, {' . $O . '} pmo, {' . $N . '} n, ' .
                                 '       {' . $T . '} ct, {' . $O . '} cdo, {' . $O . '} cmo, {' . $C . '} c ' .
                                 '       {' . $MR . '} mr ' .
                                 ' where pt.code = "' . $TYPE_NODE . '" and ' .
                                 '       n.nid = c.nid and ' .
                                 '       n.type = pmo.name and ' .
                                 '       pmo.tid = pt.id and ' .
                                 '       pmo.id = mr.pei and ' .
                                 '       pdo.mei = pmo.id and ' .
                                 '       pdo.oid = n.nid and ' .
                                 '       ct.code = "' . $TYPE_COMMENT . '" and ' .
                                 '       cmo.tid = ct.id and ' .
                                 '       cmo.id = mr.cei and ' .
                                 '       cdo.mei = cmo.id and ' .
                                 '       cdo.oid = c.cid');

    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //TODO: Complete creation of Data Relations. !!!
    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    //**********************
    //Create Data Relations.
    //**********************
    foreach ($data_references as $data_reference) {
      $fields = array(
        'name' => $data_reference->name,
        'mri' => $data_reference->mri,
        'pei' => $data_reference->pei,
        'cei' => $data_reference->cei,
      );
      //_sjamayee_create_data_reference($S, $R, $fields);
      _sjamayee_create_reference($fields);
    }
  }*/
}
